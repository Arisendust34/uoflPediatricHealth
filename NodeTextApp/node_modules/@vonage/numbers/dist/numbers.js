"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Numbers = void 0;
const server_client_1 = require("@vonage/server-client");
const remapObjects = (mapping, newObject, oldObject) => {
    for (const key in mapping) {
        if (oldObject[mapping[key]]) {
            newObject[key] = oldObject[mapping[key]];
            delete oldObject[mapping[key]];
        }
    }
    newObject = Object.assign(Object.assign({}, newObject), oldObject);
    return newObject;
};
class Numbers extends server_client_1.Client {
    buyNumber(params) {
        return __awaiter(this, void 0, void 0, function* () {
            const mapping = { target_api_key: 'targetApiKey' };
            const data = remapObjects(mapping, {}, params);
            const resp = yield this.sendPostRequest(`${this.config.restHost}/number/buy`, data);
            return {
                errorCode: resp.data['error-code'],
                errorCodeLabel: resp.data['error-code-label'],
            };
        });
    }
    cancelNumber(params) {
        return __awaiter(this, void 0, void 0, function* () {
            const mapping = { target_api_key: 'targetApiKey' };
            const data = remapObjects(mapping, {}, params);
            const resp = yield this.sendPostRequest(`${this.config.restHost}/number/cancel`, data);
            return {
                errorCode: resp.data['error-code'],
                errorCodeLabel: resp.data['error-code-label'],
            };
        });
    }
    getAvailableNumbers(filter) {
        return __awaiter(this, void 0, void 0, function* () {
            const mapping = {
                search_pattern: 'searchPattern',
            };
            const data = remapObjects(mapping, {}, filter);
            const resp = yield this.sendGetRequest(`${this.config.restHost}/number/search`, data);
            return resp.data;
        });
    }
    getOwnedNumbers(filter) {
        return __awaiter(this, void 0, void 0, function* () {
            const mapping = {
                application_id: 'applicationId',
                has_application: 'hasApplication',
                search_pattern: 'searchPattern',
            };
            const data = remapObjects(mapping, {}, filter);
            const resp = yield this.sendGetRequest(`${this.config.restHost}/account/numbers`, data);
            return resp.data;
        });
    }
    updateNumber(params) {
        return __awaiter(this, void 0, void 0, function* () {
            const mapping = {
                app_id: 'applicationId',
            };
            const data = remapObjects(mapping, {}, params);
            const resp = yield this.sendPostRequest(`${this.config.restHost}/number/update`, data);
            return {
                errorCode: resp.data['error-code'],
                errorCodeLabel: resp.data['error-code-label'],
            };
        });
    }
}
exports.Numbers = Numbers;
