"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Secrets = void 0;
const server_client_1 = require("@vonage/server-client");
class Secrets extends server_client_1.Client {
    constructor() {
        super(...arguments);
        this.authType = server_client_1.AuthenticationType.BASIC;
    }
    createSecret(apiKey, secret) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.sendPostRequest(`${this.config.apiHost}/accounts/${apiKey}/secrets`, { secret });
            return response.data;
        });
    }
    deleteSecret(apiKey, id) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.sendDeleteRequest(`${this.config.apiHost}/accounts/${apiKey}/secrets/${id}`);
        });
    }
    getSecret(apiKey, id) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.sendGetRequest(`${this.config.apiHost}/accounts/${apiKey}/secrets/${id}`);
            return response.data;
        });
    }
    listSecrets(apiKey) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.sendGetRequest(`${this.config.apiHost}/accounts/${apiKey}/secrets`);
            return response.data;
        });
    }
}
exports.Secrets = Secrets;
