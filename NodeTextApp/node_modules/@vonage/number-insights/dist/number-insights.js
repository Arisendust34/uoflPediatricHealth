"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NumberInsights = void 0;
const server_client_1 = require("@vonage/server-client");
class NumberInsights extends server_client_1.Client {
    advancedLookup(phoneNumber, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const params = Object.assign({ number: phoneNumber }, options);
            const resp = yield this.sendGetRequest(`${this.config.apiHost}/ni/advanced/json`, params);
            return resp.data;
        });
    }
    asyncAdvancedLookup(phoneNumber, callback, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const params = Object.assign({ number: phoneNumber, callback }, options);
            const resp = yield this.sendGetRequest(`${this.config.apiHost}/ni/advanced/async/json`, params);
            return resp.data;
        });
    }
    basicLookup(phoneNumber, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const params = Object.assign({ number: phoneNumber }, options);
            const resp = yield this.sendGetRequest(`${this.config.apiHost}/ni/basic/json`, params);
            return resp.data;
        });
    }
    standardLookup(phoneNumber, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const params = Object.assign({ number: phoneNumber }, options);
            const resp = yield this.sendGetRequest(`${this.config.apiHost}/ni/standard/json`, params);
            return resp.data;
        });
    }
}
exports.NumberInsights = NumberInsights;
