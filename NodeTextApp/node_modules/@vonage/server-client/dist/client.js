"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
const auth_1 = require("@vonage/auth");
const vetch_1 = require("@vonage/vetch");
const AuthenticationType_1 = require("./enums/AuthenticationType");
class Client {
    constructor(credentials, options) {
        if (typeof credentials.getQueryParams === 'undefined') {
            credentials = new auth_1.Auth(credentials);
        }
        this.auth = credentials;
        this.config = {
            restHost: null,
            apiHost: null,
            videoHost: null,
            responseType: null,
            timeout: null,
        };
        this.config.restHost = (options === null || options === void 0 ? void 0 : options.restHost) || 'https://rest.nexmo.com';
        this.config.apiHost = (options === null || options === void 0 ? void 0 : options.apiHost) || 'https://api.nexmo.com';
        this.config.videoHost =
            (options === null || options === void 0 ? void 0 : options.videoHost) || 'https://video.api.vonage.com';
        this.config.responseType = (options === null || options === void 0 ? void 0 : options.responseType) || vetch_1.ResponseTypes.json;
    }
    /**
     * Adds authentication to a request
     * By default we add key/secret. Individual clients may override this with whatever they want.
     */
    addAuthenticationToRequest(request) {
        switch (this.authType) {
            case AuthenticationType_1.AuthenticationType.BASIC:
                request.headers = Object.assign({}, request.headers, {
                    Authorization: this.auth.createBasicHeader(),
                });
                break;
            case AuthenticationType_1.AuthenticationType.JWT:
                request.headers = Object.assign({}, request.headers, {
                    Authorization: this.auth.createBearerHeader(),
                });
                break;
            case AuthenticationType_1.AuthenticationType.QUERY_KEY_SECRET:
                request.params = request.params || {};
                request.params = Object.assign({}, request.params, this.auth.getQueryParams(request.params));
                break;
            case AuthenticationType_1.AuthenticationType.KEY_SECRET:
            default:
                if (request.method === 'GET') {
                    request.params = request.params || {};
                    request.params = Object.assign({}, request.params, this.auth.getQueryParams(request.params));
                }
                else {
                    request.data = request.data || {};
                    request.data = Object.assign({}, request.data, this.auth.getQueryParams(request.data));
                }
                break;
        }
        return request;
    }
    sendDeleteRequest(url) {
        return __awaiter(this, void 0, void 0, function* () {
            const request = {
                url,
                method: 'DELETE',
            };
            return yield this.sendRequest(request);
        });
    }
    sendFormSubmitRequest(url, payload) {
        return __awaiter(this, void 0, void 0, function* () {
            const request = {
                url,
                body: new URLSearchParams(payload),
                method: 'POST',
            };
            if (!payload) {
                delete request.body;
            }
            return yield this.sendRequest(request);
        });
    }
    sendGetRequest(url, queryParams) {
        return __awaiter(this, void 0, void 0, function* () {
            const request = {
                url,
                params: queryParams,
                method: 'GET',
            };
            if (!queryParams) {
                delete request.params;
            }
            return yield this.sendRequest(request);
        });
    }
    sendPatchRequest(url, payload) {
        return __awaiter(this, void 0, void 0, function* () {
            const request = {
                url,
                data: payload,
                method: 'PATCH',
            };
            if (!payload) {
                delete request.data;
            }
            return yield this.sendRequest(request);
        });
    }
    sendPostRequest(url, payload) {
        return __awaiter(this, void 0, void 0, function* () {
            const request = {
                url,
                data: payload,
                method: 'POST',
            };
            if (!payload) {
                delete request.data;
            }
            return yield this.sendRequest(request);
        });
    }
    sendPutRequest(url, payload) {
        return __awaiter(this, void 0, void 0, function* () {
            const request = {
                url,
                data: payload,
                method: 'PUT',
            };
            if (!payload) {
                delete request.data;
            }
            return yield this.sendRequest(request);
        });
    }
    sendRequest(request) {
        return __awaiter(this, void 0, void 0, function* () {
            request = this.addAuthenticationToRequest(request);
            request.timeout = this.config.timeout;
            const result = yield (0, vetch_1.request)(request);
            return result;
        });
    }
}
exports.Client = Client;
