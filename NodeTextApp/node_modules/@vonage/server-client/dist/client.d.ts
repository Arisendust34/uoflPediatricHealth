import { AuthInterface } from '@vonage/auth';
import { ResponseTypes, VetchResponse } from '@vonage/vetch';
import { AuthenticationType } from './enums/AuthenticationType';
export declare abstract class Client {
    protected authType?: AuthenticationType;
    protected auth: AuthInterface;
    protected config: {
        restHost: string;
        apiHost: string;
        videoHost: string;
        responseType: string;
        timeout: number;
    };
    constructor(credentials: AuthInterface, options?: {
        restHost: string;
        apiHost: string;
        videoHost: string;
        responseType: ResponseTypes;
        timeout: number;
    });
    /**
     * Adds authentication to a request
     * By default we add key/secret. Individual clients may override this with whatever they want.
     */
    addAuthenticationToRequest(request: any): any;
    sendDeleteRequest<T>(url: string): Promise<VetchResponse<T>>;
    sendFormSubmitRequest<T>(url: string, payload?: {
        [key: string]: any;
    }): Promise<VetchResponse<T>>;
    sendGetRequest<T>(url: string, queryParams?: {
        [key: string]: any;
    }): Promise<VetchResponse<T>>;
    sendPatchRequest<T>(url: string, payload?: {
        [key: string]: any;
    }): Promise<VetchResponse<T>>;
    sendPostRequest<T>(url: string, payload?: {
        [key: string]: any;
    }): Promise<VetchResponse<T>>;
    sendPutRequest<T>(url: string, payload?: {
        [key: string]: any;
    }): Promise<VetchResponse<T>>;
    sendRequest<T>(request: any): Promise<VetchResponse<T>>;
}
