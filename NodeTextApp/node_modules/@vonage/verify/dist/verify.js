"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Verify = void 0;
const server_client_1 = require("@vonage/server-client");
const Command_1 = require("./enums/Command");
class Verify extends server_client_1.Client {
    cancel(requestId) {
        return __awaiter(this, void 0, void 0, function* () {
            const data = {
                request_id: requestId,
                cmd: Command_1.Command.CANCEL,
            };
            const resp = yield this.sendPostRequest(`${this.config.apiHost}/verify/control/json`, data);
            return resp.data;
        });
    }
    check(requestId, code) {
        return __awaiter(this, void 0, void 0, function* () {
            const data = {
                request_id: requestId,
                code,
            };
            const resp = yield this.sendPostRequest(`${this.config.apiHost}/verify/check/json`, data);
            return resp.data;
        });
    }
    search(requestId) {
        return __awaiter(this, void 0, void 0, function* () {
            const resp = yield this.sendGetRequest(`${this.config.apiHost}/verify/search/json`, { request_id: requestId });
            return resp.data;
        });
    }
    start(request) {
        return __awaiter(this, void 0, void 0, function* () {
            let url = '';
            if ('payee' in request) {
                url = `${this.config.apiHost}/verify/psd2/json`;
            }
            else {
                url = `${this.config.apiHost}/verify/json`;
            }
            const resp = yield this.sendPostRequest(url, request);
            return resp.data;
        });
    }
    trigger(requestId) {
        return __awaiter(this, void 0, void 0, function* () {
            const data = {
                request_id: requestId,
                cmd: Command_1.Command.TRIGGER_NEXT_EVENT,
            };
            const resp = yield this.sendPostRequest(`${this.config.apiHost}/verify/control/json`, data);
            return resp.data;
        });
    }
}
exports.Verify = Verify;
